
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< HEAD
// Sat Apr 11 11:09:50 VET 2015
=======
// Sun Apr 12 12:46:17 VET 2015
>>>>>>> Silverio
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
<<<<<<< HEAD
<<<<<<< HEAD
  * @version Sat Apr 11 11:09:50 VET 2015
=======
<<<<<<< HEAD
<<<<<<< HEAD
  * @version Sat Apr 11 02:19:19 VET 2015
=======
  * @version Sat Apr 11 09:45:30 VET 2015
>>>>>>> origin/master
=======
  * @version Sat Apr 11 10:43:40 VET 2015
>>>>>>> origin/master
>>>>>>> dccb370bc292a0fb0d593a2dc4a89127b408e467
=======
  * @version Sun Apr 12 12:46:17 VET 2015
>>>>>>> Silverio
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\054\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\010\000\002\005\011\000\002\017" +
    "\004\000\002\017\004\000\002\016\005\000\002\016\003" +
    "\000\002\021\007\000\002\021\007\000\002\006\006\000" +
    "\002\022\002\000\002\007\006\000\002\010\004\000\002" +
    "\011\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\020\014" });
=======
    "\000\103\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\021\004\000\002\021\003\000\002\024\012" +
    "\000\002\024\014\000\002\024\014\000\002\023\006\000" +
    "\002\023\006\000\002\023\004\000\002\023\004\000\002" +
    "\003\005\000\002\003\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
    "\005\011\000\002\026\006\000\002\026\005\000\002\027" +
    "\005\000\002\027\003\000\002\017\004\000\002\017\004" +
    "\000\002\016\005\000\002\016\003\000\002\016\010\000" +
    "\002\016\006\000\002\006\006\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\007" +
    "\005\000\002\007\005\000\002\010\004\000\002\011\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\020\014" });
>>>>>>> Silverio

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\136\000\004\046\005\001\002\000\004\002\140\001" +
    "\002\000\024\003\020\004\012\010\026\012\007\013\013" +
    "\014\014\027\010\031\025\045\016\001\002\000\004\026" +
    "\ufffc\001\002\000\004\014\137\001\002\000\004\014\132" +
    "\001\002\000\004\026\ufffa\001\002\000\012\003\040\014" +
    "\036\015\037\024\044\001\002\000\012\003\040\014\036" +
    "\015\037\024\044\001\002\000\004\016\uffeb\001\002\000" +
    "\004\026\ufff8\001\002\000\004\014\106\001\002\000\026" +
    "\003\020\004\012\007\105\010\026\012\007\013\013\014" +
    "\014\027\010\031\025\045\016\001\002\000\004\026\ufff5" +
    "\001\002\000\004\026\ufffd\001\002\000\004\026\ufff6\001" +
    "\002\000\004\026\ufff7\001\002\000\004\026\ufff9\001\002" +
    "\000\004\024\074\001\002\000\024\003\020\004\012\010" +
    "\026\012\007\013\013\014\014\027\010\031\025\045\016" +
    "\001\002\000\004\026\ufffb\001\002\000\004\026\031\001" +
    "\002\000\032\003\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\027\ufffe\031\ufffe\045" +
    "\ufffe\001\002\000\026\003\020\004\012\010\026\011\033" +
    "\012\007\013\013\014\014\027\010\031\025\045\016\001" +
    "\002\000\012\003\040\014\036\015\037\024\044\001\002" +
    "\000\004\026\035\001\002\000\032\003\uffff\004\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff" +
    "\027\uffff\031\uffff\045\uffff\001\002\000\034\005\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000" +
    "\034\005\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\025\uffd9\026\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\001\002\000\034\005\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\025\uffd7\026\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\001\002\000\034\005\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000\034" +
    "\005\uffde\017\uffde\020\uffde\021\uffde\022\062\023\061\025" +
    "\uffde\026\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\001\002\000\030\005\uffe1\017\051\020\053\021\057\025" +
    "\uffe1\026\uffe1\037\056\040\050\041\052\042\054\043\055" +
    "\001\002\000\012\003\040\014\036\015\037\024\044\001" +
    "\002\000\004\026\uffec\001\002\000\004\025\047\001\002" +
    "\000\034\005\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\025\uffda\026\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\001\002\000\012\003\040\014\036\015\037\024" +
    "\044\001\002\000\012\003\040\014\036\015\037\024\044" +
    "\001\002\000\012\003\040\014\036\015\037\024\044\001" +
    "\002\000\012\003\040\014\036\015\037\024\044\001\002" +
    "\000\012\003\040\014\036\015\037\024\044\001\002\000" +
    "\012\003\040\014\036\015\037\024\044\001\002\000\012" +
    "\003\040\014\036\015\037\024\044\001\002\000\012\003" +
    "\040\014\036\015\037\024\044\001\002\000\034\005\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\062\023\061\025\uffdf\026" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\001\002" +
    "\000\012\003\040\014\036\015\037\024\044\001\002\000" +
    "\012\003\040\014\036\015\037\024\044\001\002\000\034" +
    "\005\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025" +
    "\uffdd\026\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\001\002\000\034\005\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\025\uffdc\026\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\001\002\000\014\005\uffe2\020\053\021" +
    "\057\025\uffe2\026\uffe2\001\002\000\014\005\uffe4\020\053" +
    "\021\057\025\uffe4\026\uffe4\001\002\000\014\005\uffe5\020" +
    "\053\021\057\025\uffe5\026\uffe5\001\002\000\034\005\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\062\023\061\025\uffe0\026" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\001\002" +
    "\000\014\005\uffe6\020\053\021\057\025\uffe6\026\uffe6\001" +
    "\002\000\014\005\uffe3\020\053\021\057\025\uffe3\026\uffe3" +
    "\001\002\000\014\005\uffe7\020\053\021\057\025\uffe7\026" +
    "\uffe7\001\002\000\004\014\014\001\002\000\004\026\076" +
    "\001\002\000\012\003\040\014\036\015\037\024\044\001" +
    "\002\000\004\026\100\001\002\000\004\014\014\001\002" +
    "\000\004\025\102\001\002\000\024\003\020\004\012\010" +
    "\026\012\007\013\013\014\014\027\010\031\025\045\016" +
    "\001\002\000\026\003\020\004\012\007\104\010\026\012" +
    "\007\013\013\014\014\027\010\031\025\045\016\001\002" +
    "\000\004\026\uffd6\001\002\000\004\002\001\001\002\000" +
    "\010\026\uffef\032\110\033\111\001\002\000\004\026\ufff1" +
    "\001\002\000\004\014\114\001\002\000\004\015\112\001" +
    "\002\000\004\034\113\001\002\000\004\026\uffed\001\002" +
    "\000\006\026\uffef\032\110\001\002\000\004\026\ufff0\001" +
    "\002\000\004\016\117\001\002\000\012\003\040\014\036" +
    "\015\037\024\044\001\002\000\006\025\uffea\026\uffea\001" +
    "\002\000\004\026\uffe8\001\002\000\004\005\123\001\002" +
    "\000\024\003\020\004\012\010\026\012\007\013\013\014" +
    "\014\027\010\031\025\045\016\001\002\000\030\003\020" +
    "\004\012\006\125\007\126\010\026\012\007\013\013\014" +
    "\014\027\010\031\025\045\016\001\002\000\024\003\020" +
    "\004\012\010\026\012\007\013\013\014\014\027\010\031" +
    "\025\045\016\001\002\000\004\026\127\001\002\000\004" +
    "\026\ufff4\001\002\000\026\003\020\004\012\007\131\010" +
    "\026\012\007\013\013\014\014\027\010\031\025\045\016" +
    "\001\002\000\004\026\ufff3\001\002\000\010\026\uffef\032" +
    "\110\033\134\001\002\000\004\026\ufff2\001\002\000\004" +
    "\015\135\001\002\000\004\034\136\001\002\000\004\026" +
    "\uffee\001\002\000\004\026\uffe9\001\002\000\004\002\000" +
    "\001\002" });
=======
    "\000\230\000\012\027\012\030\011\045\010\046\006\001" +
    "\002\000\012\027\012\030\011\045\010\046\227\001\002" +
    "\000\004\002\226\001\002\000\026\003\034\004\025\010" +
    "\042\012\021\013\026\014\027\027\022\031\040\044\024" +
    "\045\031\001\002\000\012\027\ufffd\030\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\004\014\213\001\002\000\004\014\174" +
    "\001\002\000\004\014\013\001\002\000\004\024\014\001" +
    "\002\000\002\001\002\000\004\025\016\001\002\000\004" +
    "\046\017\001\002\000\026\003\034\004\025\010\042\012" +
    "\021\013\026\014\027\027\022\031\040\044\024\045\031" +
    "\001\002\000\004\026\ufff2\001\002\000\004\014\173\001" +
    "\002\000\004\014\150\001\002\000\004\026\ufff0\001\002" +
    "\000\012\014\171\026\uffd9\047\145\050\146\001\002\000" +
    "\016\003\061\014\057\015\052\024\063\047\055\050\056" +
    "\001\002\000\016\003\061\014\057\015\052\024\063\047" +
    "\055\050\056\001\002\000\006\016\130\024\134\001\002" +
    "\000\004\026\uffee\001\002\000\004\014\150\001\002\000" +
    "\004\026\uffec\001\002\000\026\003\034\004\025\010\042" +
    "\012\021\013\026\014\027\027\022\031\040\044\143\045" +
    "\031\001\002\000\004\026\uffea\001\002\000\004\026\ufff3" +
    "\001\002\000\004\026\uffed\001\002\000\004\026\uffeb\001" +
    "\002\000\004\024\116\001\002\000\004\026\uffef\001\002" +
    "\000\026\003\034\004\025\010\042\012\021\013\026\014" +
    "\027\027\022\031\040\044\024\045\031\001\002\000\004" +
    "\026\ufff1\001\002\000\004\026\045\001\002\000\034\003" +
    "\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\027\ufff4\031\ufff4\044\ufff4\045\ufff4\001" +
    "\002\000\030\003\034\004\025\010\042\011\047\012\021" +
    "\013\026\014\027\027\022\031\040\044\024\045\031\001" +
    "\002\000\016\003\061\014\057\015\052\024\063\047\055" +
    "\050\056\001\002\000\004\026\051\001\002\000\034\003" +
    "\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\027\ufff5\031\ufff5\044\ufff5\045\ufff5\001" +
    "\002\000\042\005\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\025\uffc4\026\uffc4\032\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000\042" +
    "\005\uffc9\017\uffc9\020\uffc9\021\uffc9\022\106\023\105\025" +
    "\uffc9\026\uffc9\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\001\002\000\004\026\uffdd\001" +
    "\002\000\042\005\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\026\uffc2\032\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002\000\042" +
    "\005\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\026\uffc1\032\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\001\002\000\042\005\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3" +
    "\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\001\002\000\042\005\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\032\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\001\002\000\042\005\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\032\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002\000" +
    "\034\005\uffcc\017\072\020\073\021\066\025\uffcc\026\uffcc" +
    "\035\067\036\077\037\071\040\076\041\075\042\074\043" +
    "\070\001\002\000\016\003\061\014\057\015\052\024\063" +
    "\047\055\050\056\001\002\000\004\025\065\001\002\000" +
    "\042\005\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\032\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000\016\003\061" +
    "\014\057\015\052\024\063\047\055\050\056\001\002\000" +
    "\016\003\061\014\057\015\052\024\063\047\055\050\056" +
    "\001\002\000\016\003\061\014\057\015\052\024\063\047" +
    "\055\050\056\001\002\000\016\003\061\014\057\015\052" +
    "\024\063\047\055\050\056\001\002\000\016\003\061\014" +
    "\057\015\052\024\063\047\055\050\056\001\002\000\016" +
    "\003\061\014\057\015\052\024\063\047\055\050\056\001" +
    "\002\000\016\003\061\014\057\015\052\024\063\047\055" +
    "\050\056\001\002\000\016\003\061\014\057\015\052\024" +
    "\063\047\055\050\056\001\002\000\016\003\061\014\057" +
    "\015\052\024\063\047\055\050\056\001\002\000\016\003" +
    "\061\014\057\015\052\024\063\047\055\050\056\001\002" +
    "\000\014\005\uffcd\020\073\021\066\025\uffcd\026\uffcd\001" +
    "\002\000\014\005\uffd4\020\073\021\066\025\uffd4\026\uffd4" +
    "\001\002\000\014\005\uffd3\020\073\021\066\025\uffd3\026" +
    "\uffd3\001\002\000\014\005\uffd2\020\073\021\066\025\uffd2" +
    "\026\uffd2\001\002\000\042\005\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\106\023\105\025\uffcb\026\uffcb\032\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001" +
    "\002\000\016\003\061\014\057\015\052\024\063\047\055" +
    "\050\056\001\002\000\016\003\061\014\057\015\052\024" +
    "\063\047\055\050\056\001\002\000\042\005\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\032" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\001\002\000\042\005\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\032\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001" +
    "\002\000\014\005\uffd0\020\073\021\066\025\uffd0\026\uffd0" +
    "\001\002\000\014\005\uffcf\020\073\021\066\025\uffcf\026" +
    "\uffcf\001\002\000\014\005\uffd1\020\073\021\066\025\uffd1" +
    "\026\uffd1\001\002\000\014\005\uffce\020\073\021\066\025" +
    "\uffce\026\uffce\001\002\000\042\005\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\106\023\105\025\uffca\026\uffca\032\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\001\002\000\004\014\117\001\002\000\004\016\130\001" +
    "\002\000\004\026\121\001\002\000\016\003\061\014\057" +
    "\015\052\024\063\047\055\050\056\001\002\000\004\026" +
    "\123\001\002\000\004\014\117\001\002\000\004\025\125" +
    "\001\002\000\026\003\034\004\025\010\042\012\021\013" +
    "\026\014\027\027\022\031\040\044\024\045\031\001\002" +
    "\000\030\003\034\004\025\007\127\010\042\012\021\013" +
    "\026\014\027\027\022\031\040\044\024\045\031\001\002" +
    "\000\004\026\uffbf\001\002\000\016\003\061\014\133\015" +
    "\052\024\063\047\055\050\056\001\002\000\006\025\uffd7" +
    "\026\uffd7\001\002\000\006\025\uffd8\026\uffd8\001\002\000" +
    "\040\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\134" +
    "\025\uffc3\026\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\001\002\000\020\003\061\014\057" +
    "\015\052\024\063\025\136\047\055\050\056\001\002\000" +
    "\004\025\142\001\002\000\006\025\uffe6\026\uffe6\001\002" +
    "\000\012\020\073\021\066\025\uffe4\032\140\001\002\000" +
    "\016\003\061\014\057\015\052\024\063\047\055\050\056" +
    "\001\002\000\004\025\uffe5\001\002\000\006\025\uffe7\026" +
    "\uffe7\001\002\000\012\014\144\026\uffd9\047\145\050\146" +
    "\001\002\000\006\007\147\026\uffdc\001\002\000\004\026" +
    "\uffdb\001\002\000\004\026\uffda\001\002\000\012\027\ufffb" +
    "\030\ufffb\045\ufffb\046\ufffb\001\002\000\010\026\uffe0\032" +
    "\152\033\153\001\002\000\004\026\uffe2\001\002\000\004" +
    "\014\150\001\002\000\004\015\154\001\002\000\004\034" +
    "\155\001\002\000\006\026\uffde\032\156\001\002\000\004" +
    "\014\150\001\002\000\004\026\uffdf\001\002\000\004\026" +
    "\uffe1\001\002\000\004\026\uffd5\001\002\000\004\005\163" +
    "\001\002\000\026\003\034\004\025\010\042\012\021\013" +
    "\026\014\027\027\022\031\040\044\024\045\031\001\002" +
    "\000\032\003\034\004\025\006\165\007\166\010\042\012" +
    "\021\013\026\014\027\027\022\031\040\044\024\045\031" +
    "\001\002\000\026\003\034\004\025\010\042\012\021\013" +
    "\026\014\027\027\022\031\040\044\024\045\031\001\002" +
    "\000\004\026\uffe9\001\002\000\030\003\034\004\025\007" +
    "\170\010\042\012\021\013\026\014\027\027\022\031\040" +
    "\044\024\045\031\001\002\000\004\026\uffe8\001\002\000" +
    "\004\026\uffdc\001\002\000\004\026\uffe3\001\002\000\004" +
    "\026\uffd6\001\002\000\004\024\175\001\002\000\006\027" +
    "\200\045\177\001\002\000\004\025\207\001\002\000\004" +
    "\014\204\001\002\000\004\014\201\001\002\000\006\025" +
    "\ufff7\032\202\001\002\000\006\027\200\045\177\001\002" +
    "\000\004\025\ufff9\001\002\000\006\025\ufff6\032\205\001" +
    "\002\000\006\027\200\045\177\001\002\000\004\025\ufff8" +
    "\001\002\000\004\046\210\001\002\000\026\003\034\004" +
    "\025\010\042\012\021\013\026\014\027\027\022\031\040" +
    "\044\024\045\031\001\002\000\030\003\034\004\025\007" +
    "\212\010\042\012\021\013\026\014\027\027\022\031\040" +
    "\044\024\045\031\001\002\000\012\027\ufffc\030\ufffc\045" +
    "\ufffc\046\ufffc\001\002\000\004\024\214\001\002\000\002" +
    "\001\002\000\004\025\216\001\002\000\004\046\217\001" +
    "\002\000\026\003\034\004\025\010\042\012\021\013\026" +
    "\014\027\027\022\031\040\044\024\045\031\001\002\000" +
    "\026\003\034\004\025\010\042\012\021\013\026\014\027" +
    "\027\022\031\040\044\221\045\031\001\002\000\012\014" +
    "\222\026\uffd9\047\145\050\146\001\002\000\006\007\223" +
    "\026\uffdc\001\002\000\012\027\ufffa\030\ufffa\045\ufffa\046" +
    "\ufffa\001\002\000\030\003\034\004\025\007\225\010\042" +
    "\012\021\013\026\014\027\027\022\031\040\044\024\045" +
    "\031\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\026\003\034\004\025\010\042\012\021\013" +
    "\026\014\027\027\022\031\040\044\024\045\031\001\002" +
    "\000\012\027\ufffe\030\ufffe\045\ufffe\046\ufffe\001\002\000" +
    "\030\003\034\004\025\007\232\010\042\012\021\013\026" +
    "\014\027\027\022\031\040\044\024\045\031\001\002\000" +
    "\004\002\001\001\002" });
>>>>>>> Silverio

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\136\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\003\016\004\027\005\020\006\005\007\026\010\010" +
    "\011\023\017\014\020\021\021\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\132\001\001\000\002" +
    "\001\001\000\012\012\121\013\042\014\041\015\040\001" +
    "\001\000\012\012\120\013\042\014\041\015\040\001\001" +
    "\000\004\022\115\001\001\000\002\001\001\000\004\016" +
    "\106\001\001\000\024\004\033\005\020\006\005\007\026" +
    "\010\010\011\023\017\014\020\021\021\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\031\004\027\005\020\006\005\007\026\010\010\011\023" +
    "\017\014\020\021\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\033\005\020" +
    "\006\005\007\026\010\010\011\023\017\014\020\021\021" +
    "\022\001\001\000\012\012\044\013\042\014\041\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\045\013" +
    "\042\014\041\015\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\072\014\041\015" +
    "\040\001\001\000\010\013\071\014\041\015\040\001\001" +
    "\000\010\013\070\014\041\015\040\001\001\000\006\014" +
    "\067\015\040\001\001\000\010\013\066\014\041\015\040" +
    "\001\001\000\010\013\065\014\041\015\040\001\001\000" +
    "\010\013\064\014\041\015\040\001\001\000\006\014\057" +
    "\015\040\001\001\000\002\001\001\000\004\015\063\001" +
    "\001\000\004\015\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\074\001\001\000\002\001" +
    "\001\000\012\012\076\013\042\014\041\015\040\001\001" +
    "\000\002\001\001\000\004\007\100\001\001\000\002\001" +
    "\001\000\026\003\102\004\027\005\020\006\005\007\026" +
    "\010\010\011\023\017\014\020\021\021\022\001\001\000" +
    "\024\004\033\005\020\006\005\007\026\010\010\011\023" +
    "\017\014\020\021\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\117\013\042\014\041\015\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\123\004\027\005\020\006\005\007\026\010" +
    "\010\011\023\017\014\020\021\021\022\001\001\000\024" +
    "\004\033\005\020\006\005\007\026\010\010\011\023\017" +
    "\014\020\021\021\022\001\001\000\026\003\127\004\027" +
    "\005\020\006\005\007\026\010\010\011\023\017\014\020" +
    "\021\021\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\033\005\020\006\005\007\026\010\010\011" +
    "\023\017\014\020\021\021\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });
=======
    "\000\230\000\010\002\004\021\003\024\006\001\001\000" +
    "\004\024\227\001\001\000\002\001\001\000\030\003\223" +
    "\004\043\005\034\006\017\007\042\010\022\011\040\017" +
    "\027\020\035\025\031\026\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\032\004\043\005\034\006" +
    "\017\007\042\010\022\011\040\017\027\020\035\025\031" +
    "\026\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\161\013\061\014\052\015\057\001\001\000" +
    "\012\012\160\013\061\014\052\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\150\001\001\000" +
    "\002\001\001\000\026\004\047\005\034\006\017\007\042" +
    "\010\022\011\040\017\027\020\035\025\031\026\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\045\004\043\005\034\006\017\007\042\010\022" +
    "\011\040\017\027\020\035\025\031\026\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\047\005\034\006\017\007\042\010\022\011\040\017" +
    "\027\020\035\025\031\026\036\001\001\000\012\012\053" +
    "\013\061\014\052\015\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\063\013\061\014\052\015\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\114\015\057" +
    "\001\001\000\010\013\113\014\052\015\057\001\001\000" +
    "\010\013\112\014\052\015\057\001\001\000\010\013\111" +
    "\014\052\015\057\001\001\000\010\013\110\014\052\015" +
    "\057\001\001\000\006\014\103\015\057\001\001\000\010" +
    "\013\102\014\052\015\057\001\001\000\010\013\101\014" +
    "\052\015\057\001\001\000\010\013\100\014\052\015\057" +
    "\001\001\000\010\013\077\014\052\015\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\107\001\001\000" +
    "\004\015\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\121\013" +
    "\061\014\052\015\057\001\001\000\002\001\001\000\004" +
    "\007\123\001\001\000\002\001\001\000\030\003\125\004" +
    "\043\005\034\006\017\007\042\010\022\011\040\017\027" +
    "\020\035\025\031\026\036\001\001\000\026\004\047\005" +
    "\034\006\017\007\042\010\022\011\040\017\027\020\035" +
    "\025\031\026\036\001\001\000\002\001\001\000\014\012" +
    "\131\013\061\014\052\015\057\026\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\136\014\052\015\057\027\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\136\014" +
    "\052\015\057\027\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\163\004\043\005\034" +
    "\006\017\007\042\010\022\011\040\017\027\020\035\025" +
    "\031\026\036\001\001\000\026\004\047\005\034\006\017" +
    "\007\042\010\022\011\040\017\027\020\035\025\031\026" +
    "\036\001\001\000\030\003\166\004\043\005\034\006\017" +
    "\007\042\010\022\011\040\017\027\020\035\025\031\026" +
    "\036\001\001\000\002\001\001\000\026\004\047\005\034" +
    "\006\017\007\042\010\022\011\040\017\027\020\035\025" +
    "\031\026\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\210\004\043\005\034\006\017\007\042\010\022\011\040" +
    "\017\027\020\035\025\031\026\036\001\001\000\026\004" +
    "\047\005\034\006\017\007\042\010\022\011\040\017\027" +
    "\020\035\025\031\026\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\217\004\043\005\034\006" +
    "\017\007\042\010\022\011\040\017\027\020\035\025\031" +
    "\026\036\001\001\000\026\004\047\005\034\006\017\007" +
    "\042\010\022\011\040\017\027\020\035\025\031\026\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\047\005\034\006\017\007\042\010\022" +
    "\011\040\017\027\020\035\025\031\026\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\230\004\043" +
    "\005\034\006\017\007\042\010\022\011\040\017\027\020" +
    "\035\025\031\026\036\001\001\000\002\001\001\000\026" +
    "\004\047\005\034\006\017\007\042\010\022\011\040\017" +
    "\027\020\035\025\031\026\036\001\001\000\002\001\001" +
    "" });
>>>>>>> Silverio

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 43: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase asi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase asf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla for"); 
			RESULT = new NodoFor(asi,ex,asf,cuerpo);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= error 
=======
          case 66: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase asi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase asf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla for_stmt"); 
			RESULT = new NodoFor(asi,ex,asf,cuerpo);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla factor error"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 41: // factor ::= ID 
=======
          case 64: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla factor FALSE"); 
					System.out.println("Devolvi nodo false");					
					RESULT= new NodoValor(false);										
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla factor TRUE"); 
					System.out.println("Devolvi nodo true");					
					RESULT= new NodoValor(true);										
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= ID 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla factor ID"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 40: // factor ::= NUM 
=======
          case 61: // factor ::= NUM 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla factor NUM"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 39: // factor ::= LPAREN exp RPAREN 
=======
          case 60: // factor ::= LPAREN exp RPAREN 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla factor LPAREN exp RPAREN"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 38: // term ::= factor 
=======
          case 59: // term ::= factor 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla term factor"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 37: // term ::= term OVER factor 
=======
          case 58: // term ::= term OVER factor 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla term OVER"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 36: // term ::= term TIMES factor 
=======
          case 57: // term ::= term TIMES factor 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla term TIMES"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 35: // simple_exp ::= term 
=======
          case 56: // simple_exp ::= term 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla simple_exp term"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 34: // simple_exp ::= simple_exp MINUS term 
=======
          case 55: // simple_exp ::= simple_exp MINUS term 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla simple_exp MINUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 33: // simple_exp ::= simple_exp PLUS term 
=======
          case 54: // simple_exp ::= simple_exp PLUS term 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla simple_exp PLUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 32: // exp ::= simple_exp 
=======
          case 53: // exp ::= simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla exp"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 31: // exp ::= simple_exp NEQUAL simple_exp 
=======
          case 52: // exp ::= simple_exp OR simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla exp OR"); 
							RESULT = new NodoOperacion(exI,tipoOp.or,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= simple_exp AND simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 9f"); 
=======
		 if(modoDepuracion) System.out.println("\t regla exp AND"); 
							RESULT = new NodoOperacion(exI,tipoOp.and,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= simple_exp NEQUAL simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla exp NEQUAL"); 
>>>>>>> Silverio
							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 30: // exp ::= simple_exp EQ simple_exp 
=======
          case 49: // exp ::= simple_exp EQ simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 9e"); 
=======
		 if(modoDepuracion) System.out.println("\t regla exp EQ"); 
>>>>>>> Silverio
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 29: // exp ::= simple_exp GE simple_exp 
=======
          case 48: // exp ::= simple_exp GE simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 9d"); 
=======
		 if(modoDepuracion) System.out.println("\t regla exp GE"); 
>>>>>>> Silverio
							RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 28: // exp ::= simple_exp LE simple_exp 
=======
          case 47: // exp ::= simple_exp LE simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 9c"); 
=======
		 if(modoDepuracion) System.out.println("\t regla exp GT"); 
>>>>>>> Silverio
							RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);	
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 27: // exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= simple_exp LT simple_exp 
=======
          case 46: // exp ::= simple_exp GT simple_exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla exp GT"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla exp LT"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 25: // write_stmt ::= WRITE exp 
=======
          case 44: // write_stmt ::= WRITE exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla write_stmt write"); 
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 24: // read_stmt ::= READ ID 
=======
          case 43: // read_stmt ::= READ ID 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla read_stmt read"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 23: // assign_stmt ::= ID NT$0 ASSIGN exp 
=======
          case 42: // assign_stmt ::= ID ASSIGN call_stmt 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla asignacion_stmt llamada de funcion"); 
			if(variable!=null)
				RESULT = new NodoAsignacion(variable.toString(),ex);
			else{
				RESULT = null;
				System.out.println("Ocurrio error en cup # 0001");
				}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assign_stmt ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla assign_stmt asignacion normal");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 22: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 40: // return_stmt ::= RETURN 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla return_stmt vacio"); 
			RESULT = new NodoReturn();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> Silverio
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 21: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
=======
          case 39: // return_stmt ::= RETURN FALSE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla return_stmt false"); 
			RESULT = new NodoReturn("",false);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_stmt ::= RETURN TRUE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla return_stmt true"); 
			RESULT = new NodoReturn("",true);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN ID 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla return_stmt id"); 
			RESULT = new NodoReturn(id.toString(),false);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla repeat_stmt"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 20: // vector_stmt ::= BOOLEAN ID OBRACKET NUM CBRACKET 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
=======
          case 35: // var_stmt ::= ID OBRACKET NUM CBRACKET 
            {
              NodoBase RESULT =null;
>>>>>>> Silverio
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 4y.2"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.BOOLEAN,tam);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		 if(modoDepuracion) System.out.println("\t regla var_stmt vector"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.INT,tam);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> Silverio
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 19: // vector_stmt ::= INT ID OBRACKET NUM CBRACKET 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4y.1"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.INT,tam);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 34: // var_stmt ::= ID OBRACKET NUM CBRACKET COMA var_stmt 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla var_stmt vector coma"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.INT,tam);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> Silverio
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 18: // var_stmt ::= ID 
=======
          case 33: // var_stmt ::= ID 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 4a.4"); 
=======
		 if(modoDepuracion) System.out.println("\t regla var_stmt id"); 
>>>>>>> Silverio
		RESULT = new NodoVariable(variable.toString(),tipoDato.BOOLEAN);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 17: // var_stmt ::= ID COMA var_stmt 
=======
          case 32: // var_stmt ::= ID COMA var_stmt 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 4a.3"); 
=======
		 if(modoDepuracion) System.out.println("\t regla var_stmt id coma"); 
>>>>>>> Silverio
			RESULT = new NodoVariable(variable.toString(),v,tipoDato.INT);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 16: // variable_stmt ::= BOOLEAN var_stmt 
=======
          case 31: // variable_stmt ::= BOOLEAN var_stmt 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 4a.2"); 
=======
		 if(modoDepuracion) System.out.println("\t regla variable_stmt boolean"); 
>>>>>>> Silverio
			RESULT = new NodoVariable(v,tipoDato.BOOLEAN);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 15: // variable_stmt ::= INT var_stmt 
=======
          case 30: // variable_stmt ::= INT var_stmt 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 if(modoDepuracion) System.out.println("\t regla 4a.1"); 
=======
		 if(modoDepuracion) System.out.println("\t regla variable_stmt int"); 
>>>>>>> Silverio
			RESULT = new NodoVariable(v,tipoDato.INT);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 14: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
=======
          case 29: // par_stmt ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla par_stmt sin coma"); 
		RESULT = new NodoCall(ex);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // par_stmt ::= simple_exp COMA par_stmt 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla par_stmt con coma"); 
				RESULT = new NodoCall(ex,v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // call_stmt ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla call_stmt funcion sin parametros"); 
			RESULT=null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // call_stmt ::= ID LPAREN par_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla call_stmt funcion con parametros"); 
			RESULT=parametros;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla if_stmt if then else end"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 13: // if_stmt ::= IF exp THEN stmt_seq END SEMI 
=======
          case 24: // if_stmt ::= IF exp THEN stmt_seq END 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla if_stmt if then end "); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 12: // stmt ::= error 
=======
          case 23: // stmt ::= error 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla stmt error"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 11: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f yr"); 
					RESULT=sfor;
=======
          case 22: // stmt ::= call_stmt 
            {
              NodoBase RESULT =null;
		int scallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase scall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt call_stmt"); 
					RESULT=scall;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		int sretleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sretright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sret = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt return_stmt"); 
					RESULT=sret;
>>>>>>> Silverio
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 10: // stmt ::= vector_stmt 
            {
              NodoBase RESULT =null;
		int svecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase svec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f yr"); 
					RESULT=svec;
=======
          case 20: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt for_stmt"); 
					RESULT=sfor;
>>>>>>> Silverio
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 9: // stmt ::= variable_stmt 
=======
          case 19: // stmt ::= variable_stmt 
>>>>>>> Silverio
            {
              NodoBase RESULT =null;
		int svarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase svar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt variable_stmt"); 
					RESULT=svar;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt write_stmt"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt read_stmt"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt assign_stmt"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt repeat_stmt"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt if_stmt"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_seq ::= stmt SEMI 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla stmt_eq stmt"); 
				RESULT=sent;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_seq ::= stmt_seq stmt SEMI 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla stmt_seq stmt_seq"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_var ::= BOOLEAN ID 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\tregla funcion parametros d"); 
			RESULT = new NodoVariable(v.toString(),tipoDato.BOOLEAN);
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_var ::= INT ID 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion parametros c"); 
			RESULT = new NodoVariable(v.toString(),tipoDato.INT);
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_var ::= BOOLEAN ID COMA exp_var 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase va = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion parametros b"); 
			RESULT = new NodoVariable(v.toString(),va,tipoDato.BOOLEAN);
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_var ::= INT ID COMA exp_var 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase va = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion parametros a"); 
			RESULT = new NodoVariable(v.toString(),va,tipoDato.INT);
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // encabezado_stmt ::= BOOLEAN ID LPAREN parametro_stmt RPAREN BEGIN stmt_seq RETURN ID END 
            {
              NodoBase RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(modoDepuracion) System.out.println("\t regla encabezado funcion c"); 
			RESULT = new NodoProcedimiento(nf.toString(),p,cuerpo,tipoFuncion.BOOLEAN);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado_stmt ::= INT ID LPAREN parametro_stmt RPAREN BEGIN stmt_seq RETURN ID END 
            {
              NodoBase RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(modoDepuracion) System.out.println("\t regla encabezado funcion b"); 
			RESULT = new NodoProcedimiento(nf.toString(),p,cuerpo,tipoFuncion.INT);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado_stmt ::= VOID ID LPAREN exp_var RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla encabezado funcion a"); 
			RESULT = new NodoProcedimiento(nf.toString(),p,cuerpo,tipoFuncion.VOID);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion_stmt ::= encabezado_stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion b"); 
				RESULT=sent;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcion_stmt ::= funcion_stmt encabezado_stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= BEGIN stmt_seq END 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla program b"); 
							ast = sent;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= funcion_stmt BEGIN stmt_seq END 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla program a"); 
						NodoBase hijo = ini;
						if(hijo!=null){
							hijo.setHermanoDerecha(sent);
							ast = hijo;
						}
						else{
							ast = sent;
						}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


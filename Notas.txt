Actualmente las listas de sentencias en tiny se encuentran separadas por punto y coma,
convertir dicha acci�n a finalizadas en punto en coma (si revisan las clases all� incluso se
les ense�o la soluci�n a ese detalle)

Se debe a�adir declaraciones de variables estilo lenguaje C: tipo_dato variable(s)
separadas por coma en caso de ser m�s de una. Los tipos de datos aceptados ser�n
boolean e int. Se pueden declarar variables en cualquier posici�n pero deben ser
declaradas antes de su uso y estar�n atadas a las reglas de �mbito explicadas
posteriormente en este documento. No se podr�n inicializar las mismas en el mismo
momento de declararlas sino posteriormente.
Ejemplos:
int a;
int a,b,c,d,e,f;

Funciones y Procedimientos:
Tipo_dato nombre ( par�metro(s) )
Ejemplos:
void procedimiento()
void procedimiento(int a, boolean b)
boolean funcion() //debe incluir return
boolean funcion(int a, boolean b) //debe incluir return

Los procedimientos o funciones poseen una lista de sentencias
limitadas entre las palabras claves begin y end.
Tipos de datos: boolean, int y void (procedimiento), en caso de
ser int o boolean el tipo de dato, la funci�n debe poseer en su
interior al menos una instrucci�n return variable o expresi�n
donde se retornara el valor resultante de la funci�n.
Nombre: sigue el mismo est�ndar de nombre que los
identificadores en tiny
Par�metros: pueden ser cero o m�s par�metros separados por
comas en donde cada par�metro posee la estructura tipo_dato
nombre. POR SIMPLIFICACION NO SE ACEPTARAN VECTORES
COMO PARAMETROS DE LAS FUNCIONES/PROCEDIMIENTOS

llamadas a una funcion Ejemplos:
x=funci�n_retorna_int(p1,p2�) donde x es int;
procedimiento(p1,p2);
x= funci�n_retorna_int(p1,p2+funcion2(a,b),4�)

Estructura del programa tiny
Ejemplo:

void procedimiento()
begin
	sentencia(s)
	�
end

boolean funcion(int a, boolean b)
begin
	sentencia(s)
	� 
	return �;
end

begin
	sentencia(s)
end

Arrays:
Ejemplos:
int x[5]; //ocupa 5 posiciones de la 0-4
int y[6]; //ocupa 6 posiciones de la 0-5

Ciclo For
for ( inicializaci�n ; comprobaci�n ; paso)
�
end
Donde cada parte es una expresi�n valida de acuerdo a su tipo
Inicializaci�n es una asignaci�n
Comprobaci�n debe ser boolean
Paso debe ser una asignaci�n
Ejemplo
for( x=0 ; x<10 ; x=x+1)
�
end

Debe a�adir los operadores relacionales and y or con su prioridad correspondiente a las
expresiones generables en tiny, as� como tambi�n los operadores faltantes: != (diferente),
>, >=, <=.

Debe permitir que el analizador l�xico acepte n�meros negativos.
prueba twitter


Yoel
package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal INT;
terminal VOID;
terminal FOR;
terminal COMA;
terminal OBRACKET;
terminal CBRACKET;
terminal AND;
terminal OR;
terminal NEQUAL;
terminal LT;
terminal GT;
terminal LE;
terminal GE;
terminal RETURN;
terminal BOOLEAN;
terminal BEGIN;
terminal TRUE;
terminal FALSE;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase var_stmt;
non terminal NodoBase variable_stmt ;
non terminal NodoBase for_stmt;
non terminal NodoBase return_stmt;
non terminal NodoBase call_stmt;
non terminal NodoBase par_stmt;

/* Precedencia de operadores */
precedence left OR;
precedence left AND;
precedence left GE,LE,GT,LT,EQ,NEQUAL;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left LPAREN,RPAREN,OBRACKET,CBRACKET;

/* REGLAS GRAMATICALES */
program     ::= BEGIN stmt_seq:s END	{: if(modoDepuracion) System.out.println("\t regla program"); 
					ast = s;
					:}

		;

stmt_seq    ::= stmt_seq:ini stmt:sent SEMI {: if(modoDepuracion) System.out.println("\t regla stmt_seq stmt_seq"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent SEMI{: if(modoDepuracion) System.out.println("\t regla stmt_eq stmt"); 
				RESULT=sent;
				:}
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla stmt if_stmt"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla stmt repeat_stmt"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla stmt assign_stmt"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla stmt read_stmt"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla stmt write_stmt"); 
					RESULT=sesc;
					:}
            | variable_stmt:svar	{: if(modoDepuracion) System.out.println("\t regla stmt variable_stmt"); 
					RESULT=svar;
					:}		
			|  for_stmt:sfor	{: if(modoDepuracion) System.out.println("\t regla stmt for_stmt"); 
					RESULT=sfor;
					:}
			| return_stmt:sret	{: if(modoDepuracion) System.out.println("\t regla stmt return_stmt"); 
					RESULT=sret;
					:}    
			| call_stmt:scall	{: if(modoDepuracion) System.out.println("\t regla stmt call_stmt"); 
					RESULT=scall;
					:}
            | error	{: if(modoDepuracion) System.out.println("\t regla stmt error"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}            
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END {: if(modoDepuracion) System.out.println("\t regla if_stmt if then end "); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla if_stmt if then else end"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}		
		;
		
call_stmt   ::= ID LPAREN par_stmt:parametros RPAREN  {: if(modoDepuracion) System.out.println("\t regla call_stmt funcion con parametros"); 
			RESULT=parametros;
		:}
		| ID LPAREN  RPAREN  {: if(modoDepuracion) System.out.println("\t regla call_stmt funcion sin parametros"); 
			RESULT=null;
		:}
		;

par_stmt ::=  simple_exp:ex  COMA par_stmt:v {: if(modoDepuracion) System.out.println("\t regla par_stmt con coma"); 
				RESULT = new NodoCall(ex,v);
		:}
		| simple_exp:ex {: if(modoDepuracion) System.out.println("\t regla par_stmt sin coma"); 
		RESULT = new NodoCall(ex);
		:}	
		;

variable_stmt     ::= INT var_stmt:v {: if(modoDepuracion) System.out.println("\t regla variable_stmt int"); 
			RESULT = new NodoVariable(v,tipoDato.INT);
		:}
		| BOOLEAN var_stmt:v {: if(modoDepuracion) System.out.println("\t regla variable_stmt boolean"); 
			RESULT = new NodoVariable(v,tipoDato.BOOLEAN);
		:}		
		;

var_stmt     ::= ID:variable COMA var_stmt:v {: if(modoDepuracion) System.out.println("\t regla var_stmt id coma"); 
			RESULT = new NodoVariable(variable.toString(),v,tipoDato.INT);
		:}
		| ID:variable {: if(modoDepuracion) System.out.println("\t regla var_stmt id"); 
		RESULT = new NodoVariable(variable.toString(),tipoDato.BOOLEAN);
		:}
		| ID:variable OBRACKET NUM:tam CBRACKET COMA var_stmt:v {: if(modoDepuracion) System.out.println("\t regla var_stmt vector coma"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.INT,tam);
		:}		
		| ID:variable OBRACKET NUM:tam CBRACKET{: if(modoDepuracion) System.out.println("\t regla var_stmt vector"); 
			RESULT = new NodoVector(variable.toString(),tipoDato.INT,tam);
		:}		
		;		
		
repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla repeat_stmt"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;
return_stmt ::= RETURN ID:id {: if(modoDepuracion) System.out.println("\t regla return_stmt id"); 
			RESULT = new NodoReturn(id.toString(),false);
		:}
		| RETURN TRUE {: if(modoDepuracion) System.out.println("\t regla return_stmt true"); 
			RESULT = new NodoReturn("",true);
		:}
		| RETURN FALSE {: if(modoDepuracion) System.out.println("\t regla return_stmt false"); 
			RESULT = new NodoReturn("",false);
		:}
		| RETURN {: if(modoDepuracion) System.out.println("\t regla return_stmt vacio"); 
			RESULT = new NodoReturn();
		:}
		;

assign_stmt ::= ID:variable ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla assign_stmt asignacion normal");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		| ID:variable ASSIGN call_stmt:ex {: if(modoDepuracion) System.out.println("\t regla asignacion_stmt llamada de funcion"); 
			if(variable!=null)
				RESULT = new NodoAsignacion(variable.toString(),ex);
			else{
				RESULT = null;
				System.out.println("Ocurrio error en cup # 0001");
				}
		:} 
		;

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla read_stmt read"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla write_stmt write"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp LT"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI GT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp GT"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
		| simple_exp:exI LE simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp GT"); 
							RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);	
							:}
		| simple_exp:exI GE simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp GE"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
					:}						
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp EQ"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}	
		| simple_exp:exI NEQUAL simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp NEQUAL"); 
							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							:}
		| simple_exp:exI AND simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp AND"); 
							RESULT = new NodoOperacion(exI,tipoOp.and,exD);
							:}
		| simple_exp:exI OR simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla exp OR"); 
							RESULT = new NodoOperacion(exI,tipoOp.or,exD);
							:}	
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla exp"); 
					RESULT = ex;
					:}			
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla simple_exp PLUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla simple_exp MINUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla simple_exp term"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla term TIMES"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla term OVER"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla term factor"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla factor LPAREN exp RPAREN"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla factor NUM"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla factor ID"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| TRUE	{: if(modoDepuracion) System.out.println("\t regla factor TRUE"); 
					System.out.println("Devolvi nodo true");					
					RESULT= new NodoValor(true);										
					:}
		| FALSE {: if(modoDepuracion) System.out.println("\t regla factor FALSE"); 
					System.out.println("Devolvi nodo false");					
					RESULT= new NodoValor(false);										
					:}
		| error	{: if(modoDepuracion) System.out.println("\t regla factor error"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;
		
for_stmt     ::= FOR LPAREN assign_stmt:asi SEMI exp:ex SEMI assign_stmt:asf RPAREN stmt_seq:cuerpo END {: if(modoDepuracion) System.out.println("\t regla for_stmt"); 
			RESULT = new NodoFor(asi,ex,asf,cuerpo);
		:}
		;